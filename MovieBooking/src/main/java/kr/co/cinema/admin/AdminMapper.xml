<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="kr.co.cinema.admin.AdminMapper">

	<!--****************************************************************************************
	메인화면쿼리!
	*************************************************************************************-->
	
	<!-- 메인화면 하단 영화별 매출표 -->
	<select id="selectClientCount"
			resultType="kr.co.cinema.dto.MovieAndBranchDayCount">
			SELECT 	mov_korName 		AS movKorName, 
					mov_openDate		AS movOpenDate, 
					brcCnt_clientCount 	AS brcCntClientCount
			FROM 	MOVIE 
					INNER JOIN BRANCH_DAY_COUNT 
							ON MOVIE.mov_code = BRANCH_DAY_COUNT.mov_code 
			GROUP 	BY MOVIE.mov_korName 
			ORDER 	BY BRANCH_DAY_COUNT .brcCnt_clientCount DESC
			LIMIT 4
	</select>
	
	<!-- 바 그래프 상위5지점 조회 -->
	<select id="selectBranchForBarGraph"
			resultType="kr.co.cinema.dto.BranchAndBranchDayCount">
			SELECT 	BRANCH.brc_name 						AS brcName,
					BRANCH.brc_code 						AS brcCode,
					SUM(BRANCH_DAY_COUNT.brcCnt_saleTotal) 	AS brcCntSaleTotal
			FROM 	BRANCH
					INNER JOIN BRANCH_DAY_COUNT
							ON BRANCH.brc_code = BRANCH_DAY_COUNT.brc_code
			GROUP 	BY BRANCH.brc_name
			ORDER 	BY SUM(BRANCH_DAY_COUNT.brcCnt_saleTotal) DESC
			LIMIT 	5;
	</select>
	
	<!-- 바 그래프 상위3지점 조회 -->
	<select id="selectMovieCodeForCircleGraph"
			resultType="kr.co.cinema.dto.MovieAndBranchDayCount">
		SELECT 	BRANCH_DAY_COUNT.mov_code 				AS movCode,
				MOVIE.mov_korName 						AS movKorName,
				SUM(BRANCH_DAY_COUNT.brcCnt_saleTotal)	AS brcCntSaleTotal
		FROM	BRANCH_DAY_COUNT
				INNER JOIN MOVIE
						ON BRANCH_DAY_COUNT.mov_code = MOVIE.mov_code
		GROUP 	BY BRANCH_DAY_COUNT.mov_code
		ORDER 	BY SUM(BRANCH_DAY_COUNT.brcCnt_saleTotal) DESC
		LIMIT 	3;
	</select>
	
	<!-- 선그래프 총매출액 -->
	<select id="selectBranchCount"
			resultType="int">
			SELECT	SUM(BRANCH_DAY_COUNT.brcCnt_saleTotal) AS brcCntSaleTotal
			FROM	BRANCH_DAY_COUNT
	</select>
	
	<!-- 선그래프 월매출액 -->
	<select id="selectMonthBranchCount"
			resultType="kr.co.cinema.dto.BranchDayCount">
			SELECT	sum( brcCnt_saleTotal) AS brcCntSaleTotal
			FROM	BRANCH_DAY_COUNT 
			GROUP 	BY DATE_FORMAT( brcCnt_date, '%Y-%m' ) 
			ORDER 	BY DATE_FORMAT( brcCnt_date, '%Y-%m' ) 
			LIMIT 	0 , 30;
	</select>
	
	<!--****************************************************************************************
	지점관리쿼리
	*************************************************************************************-->
	
	<!-- 지점리스트 조회 -->
	<select id="selectBranchList"
			resultType="kr.co.cinema.dto.Branch">
			SELECT	BRANCH.brc_code			AS brcCode,
					BRANCH.brc_name			AS brcName,
					BRANCH.brc_local		AS brcLocal,
					BRANCH.brc_addr			AS brcAddr,
					BRANCH.brc_infoDetail	AS brcInfoDetail
			FROM	BRANCH
	</select>
	
	<!-- 지점등록 -->
	<insert id="insertBranch"
			parameterType="kr.co.cinema.dto.Branch">
			INSERT INTO BRANCH 
						(brc_name, 
						 brc_local, 
						 brc_addr, 
						 brc_infoDetail, 
						 brc_imgPath) 
			VALUES 
						(#{brcName}, 
						 #{brcLocal}, 
						 #{brcAddr}, 
						 #{brcInfoDetail}, 
						 #{brcImgPath}	); 
	</insert>
	
	<!-- 수정 전 지점코드로 지점데이터 조회 -->
	<select id="selectBranchForUpdate"
			resultType="kr.co.cinema.dto.Branch">
			SELECT	BRANCH.brc_code			AS brcCode,
					BRANCH.brc_name			AS brcName,
					BRANCH.brc_local		AS brcLocal,
					BRANCH.brc_addr			AS brcAddr,
					BRANCH.brc_infoDetail	AS brcInfoDetail,
					BRANCH.brc_imgPath		AS brcImgPath
			FROM	BRANCH
			WHERE	BRANCH.brc_code = #{brcCode}
	</select>
	
	<!-- 지점수정 -->
	<update id="updateBranch"
			parameterType="kr.co.cinema.dto.Branch">
			UPDATE	BRANCH 
			SET		BRANCH.brc_name = #{brcName},
					BRANCH.brc_local = #{brcLocal},
					BRANCH.brc_addr = #{brcAddr},
					BRANCH.brc_infoDetail = #{brcInfoDetail},
					BRANCH.brc_imgPath = #{brcImgPath} 
			WHERE	BRANCH.brc_code = #{brcCode}
	</update>
	
	<!-- 지점탈퇴 -->
	<delete id="deleteBranch"
			parameterType="kr.co.cinema.dto.Branch">
			DELETE	FROM BRANCH 
			WHERE	BRANCH.brc_code = #{brcCode}
	</delete>
	
	<!--****************************************************************************************
	지점관리자쿼리
	*************************************************************************************-->
	
	<!-- 지점관리자 등록하기위한 지점 조회 -->
	<select id="selectAdminList"
			resultType="kr.co.cinema.dto.AdminAndBranch">
			SELECT	ADMIN.adm_id		AS admId,
					ADMIN.adm_date		AS admDate,
			 		BRANCH.brc_name		AS brcName,
			 		BRANCH.brc_local	AS brcLocal,
			 		BRANCH.brc_code		AS brcCode
			FROM	ADMIN
					INNER JOIN	BRANCH
							ON	ADMIN.brc_code = BRANCH.brc_code
	</select>
	
	<!-- 관리자 등록 -->
	<insert id="insertAdmin"
			parameterType="kr.co.cinema.dto.Admin">
			INSERT INTO	ADMIN
						(adm_id,
						 brc_code,
						 adm_pw,
						 adm_auth,
						 adm_date)
			VALUES 
						(#{admId}, 
						 #{brcCode}, 
						 #{admPw}, 
						 '지점관리자', 
						 now()); 
	</insert>
	
	<!-- 관리자 수정 전 관리자 권한 및 아이디 조회 -->
	<select id="selectAdminAuthAndId"
			resultType="kr.co.cinema.dto.Admin">
			SELECT	ADMIN.adm_id	AS	admId,
					ADMIN.adm_auth	AS	admAuth
			FROM	ADMIN
			WHERE	ADMIN.adm_id = #{admId}
	</select>
	
	<!-- 관리자 수정 -->
	<update id="updateAdmin"
			parameterType="kr.co.cinema.dto.Admin">
			UPDATE	ADMIN 
			SET		ADMIN.brc_code = #{brcCode},
					ADMIN.adm_pw = #{admPw},
					ADMIN.adm_auth = #{admAuth}
			WHERE	ADMIN.adm_id = #{admId};
	</update>
	
	<!-- 관리자 삭제 -->
	<delete id="deleteAdmin"
			parameterType="kr.co.cinema.dto.Admin">
			DELETE	FROM ADMIN
			WHERE	ADMIN.adm_id = #{admId};
	</delete>
	
	<!--****************************************************************************************
	회원조회쿼리
	******************************************************************************************-->
	
	<!-- 회원검색 -->
	<select id="selectMemberList"
			resultType="kr.co.cinema.dto.Member">
			SELECT	mem_id			AS memId, 
					mem_pw			AS memPw,
					mem_phone		AS memPhone,
			 		mem_name		AS memName,
			 		mem_gender		AS memGender,
			 		mem_birth		AS memBirth,
			 		mem_postNo		AS memPostNo,
			 		mem_addr		AS memAddr,
			 		mem_mail		AS memMail,
			 		mem_mileage		AS memMileage,
			 		mem_joinDay		AS memJoinDay,
			 		mem_status		AS memStatus,
			 		mem_leaveDay	AS memLeaveDay
			FROM	MEMBER
	</select>
	
	<!--****************************************************************************************
	영화관리쿼리
	******************************************************************************************-->	
	
	<!-- 관리자 영화 등록 : 모달을 사용해서 인물이름으로 등록할 감독정보조회 -->
	<select id="selectCharCodeForAddMovie"
			resultType="kr.co.cinema.dto.Character">
			SELECT	`CHARACTER`.char_korName	AS charKorName,
					`CHARACTER`.char_code		AS charCode,
					`CHARACTER`.char_nation		AS charNation,
					`CHARACTER`.char_birth		AS charBirth,
					`CHARACTER`.char_gender		AS charGender
			FROM	`CHARACTER`
			WHERE	`CHARACTER`.char_korName = #{charKorName};
	</select>
	
	<!-- 관리자 영화 등록 : 모달에서 조회한 인물정보중 인물 코드로 폼에 넣을 선택한 인물코드조회 -->
	<select id="choiceCharCode"
			resultType="kr.co.cinema.dto.Character">
			SELECT	`CHARACTER`.char_code
			FROM	`CHARACTER`
			WHERE	`CHARACTER`.char_code = #{charCode};
	</select>
	
	<!-- 영화등록 쿼리 -->
	<insert id="insertMovie"
			parameterType="kr.co.cinema.dto.Movie">
			INSERT INTO MOVIE
						(mov_korName, 
						 mov_engName, 
						 char_code, 
						 mov_nation, 
						 mov_grade, 
						 mov_genre, 
						 mov_maker, 
						 mov_runningTime, 
						 mov_openDate, 
						 mov_infoDetail, 
						 mov_imgPath, 
						 mov_videoPath, 
						 mov_status, 
						 mov_date, 
						 mov_finalModifyDate) 
			VALUES
						(#{movKorName}, 
						 #{movEngName},
						 #{charCode},
						 #{movNation}, 
						 #{movGrade}, 
						 #{movGenre}, 
						 #{movMaker}, 
						 #{movRunningTime}, 
						 #{movOpenDate}, 
						 #{movInfoDetail},
						 #{movImgPath},
						 #{movVideoPath}, 
						 #{movStatus}, 
						 now(), 
						 now()); 
	</insert>
	
	<!-- 영화조회 -->
	<select id="selectMovieList"
			resultType="kr.co.cinema.dto.Movie">
			SELECT	mov_korName			AS movKorName, 
					mov_nation			AS movNation, 
					mov_grade			AS movGrade, 
					mov_genre			AS movGenre, 
					mov_maker			AS movMaker, 
					mov_runningTime		AS movRunningTime, 
					mov_openDate		AS movOpenDate, 
					mov_imgPath			AS movImgPath, 
					mov_status			AS movStatus, 
					char_korName		AS charKorName
			FROM	MOVIE 
					INNER JOIN	`CHARACTER` 
							ON	MOVIE.char_code = `CHARACTER`.char_code 
			ORDER BY	MOVIE.mov_date 
	</select>
	
	<!--****************************************************************************************
	단가관리쿼리
	******************************************************************************************-->
	
	<!-- 단가등록 -->
	<insert id="insertCost"
			parameterType="kr.co.cinema.dto.ScreenCost">
			INSERT INTO	SCREEN_COST
						(scco_screen, 
						 scco_price, 
						 scco_applyYear, 
						 scco_status, 
						 scco_date)
			VALUES 
						(#{sccoScreen}, 
						 #{sccoPrice}, 
						 #{sccoApplyYear}, 
						 #{sccoStatus}, 
						 NOW());
	</insert>
	
	<!--****************************************************************************************
	인물관리쿼리
	******************************************************************************************-->

	<!-- 인물등록쿼리 -->
	<insert id="insertChar"
			parameterType="kr.co.cinema.dto.Character">
			INSERT INTO	`CHARACTER`
						(char_korName, 
						 char_engName, 
						 char_birth, 
						 char_gender, 
						 char_profileImgPath, 
						 char_nation, 
						 char_bioGraphy, 
						 char_finalModifyDate) 
			VALUES 
						(#{charKorName}, 
						 #{charEngName}, 
						 #{charBirth}, 
						 #{charGender}, 
						 #{charFrofileImgPath}, 
						 #{charNation}, 
						 #{charBioGraphy}, 
						 NOW()); 	
	</insert>
	
	<!-- 인물리스트조회 쿼라 -->
	<select id="selectCharacterList"
			resultType="kr.co.cinema.dto.Character">
			SELECT	`CHARACTER`.char_korName	AS charKorName,
					`CHARACTER`.char_engName	AS charEngName,
					`CHARACTER`.char_birth		AS charBirth,
					`CHARACTER`.char_gender		AS charGender,
					`CHARACTER`.char_nation		AS charNation
			FROM	`CHARACTER`
	</select>
	<!--****************************************************************************************
	상영관관리쿼리
	******************************************************************************************-->

	<!-- 상영관등록전 지점이름으로 지점코드 조회하기 위한 쿼리 -->
	<select id="selectBrcCode"
			resultType="String"
			parameterType="String">
			SELECT	BRANCH.brc_code 
			FROM	BRANCH 
			WHERE	BRANCH.brc_name = #{selectBrcCode};
	</select>

	<!-- 상영관등록 -->
	<insert id="insertScreen"
			parameterType="kr.co.cinema.dto.Screen">
			INSERT INTO	SCREEN 
						(scr_code,
						 brc_code,
						 scr_name,
						 scr_rowSize,
						 scr_colSize) 
			VALUES		
						(#{scrCode},
						 #{brcCode},
						 #{scrName},
						 #{scrRowSize},
						 #{scrColSize}); 
			
	</insert>
	
	<!-- 상영관리스트조회 -->
	<select id="selectScreenList"
			resultType="kr.co.cinema.dto.Screen">
			SELECT		BRANCH.brc_name		AS	brcName,
						SCREEN.scr_name		AS	scrName,
						SCREEN.scr_rowSize	AS	scrRowSize,
						SCREEN.scr_colSize	AS	scrColSize
			FROM		SCREEN
						JOIN	BRANCH
						ON		SCREEN.brc_code = BRANCH.brc_code
			ORDER BY	BRANCH.brc_name	ASC;
	</select>
	<!--****************************************************************************************
	상영일정관리쿼리
	******************************************************************************************-->

	<!-- 상영일정등록전 영화이름으로 영화코드 조회 -->
	<select id="selectMovieCode"
			resultType="String"
			parameterType="String">
			SELECT	MOVIE.mov_code 
			FROM	MOVIE 
			WHERE	MOVIE.mov_korName = #{movKorName}; 
	</select>
	
	<!-- 상영일정등록전 지점이름으로 지점코드, 스크린코드, 스크린이름조회 -->
	<select id="selectmovieAndScreens"
			resultType="kr.co.cinema.dto.BranchAndScreen"
			parameterType="kr.co.cinema.dto.BranchAndScreen">
			SELECT	BRANCH.brc_code,
					SCREEN.scr_name,
					SCREEN.scr_code
			FROM	BRANCH
					INNER JOIN	SCREEN
							ON	BRANCH.brc_code = SCREEN.brc_code
			WHERE	BRANCH.brc_name = #{brcName}
	</select>
</mapper>